
use crate::shared::{AddrMode, Mnemonic};

pub struct Instruction {
    pub mnemonic: Mnemonic,
    pub addr_mode: AddrMode,
}

struct I(Mnemonic, AddrMode);

const INSTRUCTIONS_DEF: [I; 0x100] = {

    use crate::shared::Mnemonic::*;
    use crate::shared::AddrMode::*;

    [

        /* 00 */ I( BRK, Impl ),
        /* 01 */ I( ORA, XInd ),
        /* 02 */ I( ILLEGAL, Illegal ),
        /* 03 */ I( ILLEGAL, Illegal ),
        /* 04 */ I( ILLEGAL, Illegal ),
        /* 05 */ I( ORA, Zpg ),
        /* 06 */ I( ASL, Zpg ),
        /* 07 */ I( ILLEGAL, Illegal ),
        /* 08 */ I( PHP, Impl ),
        /* 09 */ I( ORA, Imm ),
        /* 0A */ I( ASL, Impl /* A */ ),
        /* 0B */ I( ILLEGAL, Illegal ),
        /* 0C */ I( ILLEGAL, Illegal ),
        /* 0D */ I( ORA, Abs ),
        /* 0E */ I( ASL, Abs ),
        /* 0F */ I( ILLEGAL, Illegal ),
        /* 10 */ I( BPL, Rel ),
        /* 11 */ I( ORA, IndY ),
        /* 12 */ I( ILLEGAL, Illegal ),
        /* 13 */ I( ILLEGAL, Illegal ),
        /* 14 */ I( ILLEGAL, Illegal ),
        /* 15 */ I( ORA, Zpg ),
        /* 16 */ I( ASL, ZpgX ),
        /* 17 */ I( ILLEGAL, Illegal ),
        /* 18 */ I( CLC, Impl ),
        /* 19 */ I( ORA, AbsY ),
        /* 1A */ I( ILLEGAL, Illegal ),
        /* 1B */ I( ILLEGAL, Illegal ),
        /* 1C */ I( ILLEGAL, Illegal ),
        /* 1D */ I( ORA, AbsX ),
        /* 1E */ I( ASL, AbsX ),
        /* 1F */ I( ILLEGAL, Illegal ),
        /* 20 */ I( JSR, Abs ),
        /* 21 */ I( AND, XInd ),
        /* 22 */ I( ILLEGAL, Illegal ),
        /* 23 */ I( ILLEGAL, Illegal ),
        /* 24 */ I( BIT, Zpg ),
        /* 25 */ I( AND, Zpg ),
        /* 26 */ I( ROL, Zpg ),
        /* 27 */ I( ILLEGAL, Illegal ),
        /* 28 */ I( PLP, Impl ),
        /* 29 */ I( AND, Imm ),
        /* 2A */ I( ROL, Impl /* A */ ),
        /* 2B */ I( ILLEGAL, Illegal ),
        /* 2C */ I( BIT, Abs ),
        /* 2D */ I( AND, Abs ),
        /* 2E */ I( ROL, Abs ),
        /* 2F */ I( ILLEGAL, Illegal ),
        /* 30 */ I( BMI, Rel ),
        /* 31 */ I( AND, IndY ),
        /* 32 */ I( ILLEGAL, Illegal ),
        /* 33 */ I( ILLEGAL, Illegal ),
        /* 34 */ I( ILLEGAL, Illegal ),
        /* 35 */ I( AND, Zpg ),
        /* 36 */ I( ROL, ZpgX ),
        /* 37 */ I( ILLEGAL, Illegal ),
        /* 38 */ I( SEC, Impl ),
        /* 39 */ I( AND, AbsY ),
        /* 3A */ I( ILLEGAL, Illegal ),
        /* 3B */ I( ILLEGAL, Illegal ),
        /* 3C */ I( ILLEGAL, Illegal ),
        /* 3D */ I( AND, AbsX ),
        /* 3E */ I( ROL, AbsX ),
        /* 3F */ I( ILLEGAL, Illegal ),
        /* 40 */ I( RTI, Impl ),
        /* 41 */ I( EOR, XInd ),
        /* 42 */ I( ILLEGAL, Illegal ),
        /* 43 */ I( ILLEGAL, Illegal ),
        /* 44 */ I( ILLEGAL, Illegal ),
        /* 45 */ I( EOR, Zpg ),
        /* 46 */ I( LSR, Zpg ),
        /* 47 */ I( ILLEGAL, Illegal ),
        /* 48 */ I( PHA, Impl ),
        /* 49 */ I( EOR, Imm ),
        /* 4A */ I( LSR, Impl /* A */ ),
        /* 4B */ I( ILLEGAL, Illegal ),
        /* 4C */ I( JMP, Abs ),
        /* 4D */ I( EOR, Abs ),
        /* 4E */ I( LSR, Abs ),
        /* 4F */ I( ILLEGAL, Illegal ),
        /* 50 */ I( BVC, Rel ),
        /* 51 */ I( EOR, IndY ),
        /* 52 */ I( ILLEGAL, Illegal ),
        /* 53 */ I( ILLEGAL, Illegal ),
        /* 54 */ I( ILLEGAL, Illegal ),
        /* 55 */ I( EOR, Zpg ),
        /* 56 */ I( LSR, Zpg ),
        /* 57 */ I( ILLEGAL, Illegal ),
        /* 58 */ I( CLI, Impl ),
        /* 59 */ I( EOR, AbsY ),
        /* 5A */ I( ILLEGAL, Illegal ),
        /* 5B */ I( ILLEGAL, Illegal ),
        /* 5C */ I( ILLEGAL, Illegal ),
        /* 5D */ I( EOR, AbsX ),
        /* 5E */ I( LSR, AbsX ),
        /* 5F */ I( ILLEGAL, Illegal ),
        /* 60 */ I( RTS, Impl ),
        /* 61 */ I( ADC, XInd ),
        /* 62 */ I( ILLEGAL, Illegal ),
        /* 63 */ I( ILLEGAL, Illegal ),
        /* 64 */ I( ILLEGAL, Illegal ),
        /* 65 */ I( ADC, Zpg ),
        /* 66 */ I( ROR, Zpg ),
        /* 67 */ I( ILLEGAL, Illegal ),
        /* 68 */ I( PLA, Impl ),
        /* 69 */ I( ADC, Imm ),
        /* 6A */ I( ROR, Impl /* A */ ),
        /* 6B */ I( ILLEGAL, Illegal ),
        /* 6C */ I( JMP, Ind ),
        /* 6D */ I( ADC, Abs ),
        /* 6E */ I( ROR, Abs ),
        /* 6F */ I( ILLEGAL, Illegal ),
        /* 70 */ I( BVS, Rel ),
        /* 71 */ I( SBC, IndY ),
        /* 72 */ I( ILLEGAL, Illegal ),
        /* 73 */ I( ILLEGAL, Illegal ),
        /* 74 */ I( ILLEGAL, Illegal ),
        /* 75 */ I( ADC, ZpgX ),
        /* 76 */ I( ROR, ZpgX ),
        /* 77 */ I( ILLEGAL, Illegal ),
        /* 78 */ I( SEI, Impl ),
        /* 79 */ I( ADC, AbsY ),
        /* 7A */ I( ILLEGAL, Illegal ),
        /* 7B */ I( ILLEGAL, Illegal ),
        /* 7C */ I( ILLEGAL, Illegal ),
        /* 7D */ I( ADC, AbsY ),
        /* 7E */ I( ROR, AbsX ),
        /* 7F */ I( ILLEGAL, Illegal ),
        /* 80 */ I( ILLEGAL, Illegal ),
        /* 81 */ I( STA, XInd ),
        /* 82 */ I( ILLEGAL, Illegal ),
        /* 83 */ I( ILLEGAL, Illegal ),
        /* 84 */ I( STY, Zpg ),
        /* 85 */ I( STA, Zpg ),
        /* 86 */ I( STX, Zpg ),
        /* 87 */ I( ILLEGAL, Illegal ),
        /* 88 */ I( DEY, Impl ),
        /* 89 */ I( ILLEGAL, Illegal ),
        /* 8A */ I( TXA, Impl ),
        /* 8B */ I( ILLEGAL, Illegal ),
        /* 8C */ I( STY, Abs ),
        /* 8D */ I( STA, Abs ),
        /* 8E */ I( STX, Abs ),
        /* 8F */ I( ILLEGAL, Illegal ),
        /* 90 */ I( BCC, Rel ),
        /* 91 */ I( STA, IndY ),
        /* 92 */ I( ILLEGAL, Illegal ),
        /* 93 */ I( ILLEGAL, Illegal ),
        /* 94 */ I( STY, ZpgX ),
        /* 95 */ I( STA, ZpgX ),
        /* 96 */ I( STX, ZpgY ),
        /* 97 */ I( ILLEGAL, Illegal ),
        /* 98 */ I( TYA, Impl ),
        /* 99 */ I( STA, AbsY ),
        /* 9A */ I( TXS, Impl ),
        /* 9B */ I( ILLEGAL, Illegal ),
        /* 9C */ I( ILLEGAL, Illegal ),
        /* 9D */ I( STA, AbsX ),
        /* 9E */ I( ILLEGAL, Illegal ),
        /* 9F */ I( ILLEGAL, Illegal ),
        /* A0 */ I( LDY, Imm ),
        /* A1 */ I( LDA, XInd ),
        /* A2 */ I( LDX, Imm ),
        /* A3 */ I( ILLEGAL, Illegal ),
        /* A4 */ I( LDY, Zpg ),
        /* A5 */ I( LDA, Zpg ),
        /* A6 */ I( LDX, Zpg ),
        /* A7 */ I( ILLEGAL, Illegal ),
        /* A8 */ I( TAY, Impl ),
        /* A9 */ I( LDA, Imm ),
        /* AA */ I( TAX, Impl ),
        /* AB */ I( ILLEGAL, Illegal ),
        /* AC */ I( LDY, Abs ),
        /* AD */ I( LDA, Abs ),
        /* AE */ I( LDX, Abs ),
        /* AF */ I( ILLEGAL, Illegal ),
        /* B0 */ I( BCS, Rel ),
        /* B1 */ I( LDA, IndY ),
        /* B2 */ I( ILLEGAL, Illegal ),
        /* B3 */ I( ILLEGAL, Illegal ),
        /* B4 */ I( LDY, ZpgX ),
        /* B5 */ I( LDA, ZpgX ),
        /* B6 */ I( LDX, ZpgY ),
        /* B7 */ I( ILLEGAL, Illegal ),
        /* B8 */ I( CLV, Impl ),
        /* B9 */ I( LDA, AbsY ),
        /* BA */ I( TSX, Impl ),
        /* BB */ I( ILLEGAL, Illegal ),
        /* BC */ I( LDY, AbsX ),
        /* BD */ I( LDA, AbsX ),
        /* BE */ I( LDX, AbsY ),
        /* BF */ I( ILLEGAL, Illegal ),
        /* C0 */ I( CPY, Imm ),
        /* C1 */ I( CMP, XInd ),
        /* C2 */ I( ILLEGAL, Illegal ),
        /* C3 */ I( ILLEGAL, Illegal ),
        /* C4 */ I( CPY, Zpg ),
        /* C5 */ I( CMP, Zpg ),
        /* C6 */ I( DEC, Zpg ),
        /* C7 */ I( ILLEGAL, Illegal ),
        /* C8 */ I( INY, Impl ),
        /* C9 */ I( CMP, Imm ),
        /* CA */ I( DEX, Impl ),
        /* CB */ I( ILLEGAL, Illegal ),
        /* CC */ I( CPY, Abs ),
        /* CD */ I( CMP, Abs ),
        /* CE */ I( DEC, Abs ),
        /* CF */ I( ILLEGAL, Illegal ),
        /* D0 */ I( BNE, Rel ),
        /* D1 */ I( CMP, IndY ),
        /* D2 */ I( ILLEGAL, Illegal ),
        /* D3 */ I( ILLEGAL, Illegal ),
        /* D4 */ I( ILLEGAL, Illegal ),
        /* D5 */ I( CMP, ZpgX ),
        /* D6 */ I( DEC, ZpgX ),
        /* D7 */ I( ILLEGAL, Illegal ),
        /* D8 */ I( CLD, Impl ),
        /* D9 */ I( CMP, AbsY ),
        /* DA */ I( ILLEGAL, Illegal ),
        /* DB */ I( ILLEGAL, Illegal ),
        /* DC */ I( ILLEGAL, Illegal ),
        /* DD */ I( CMP, AbsX ),
        /* DE */ I( DEC, AbsX ),
        /* DF */ I( ILLEGAL, Illegal ),
        /* E0 */ I( CPX, Imm ),
        /* E1 */ I( SBC, XInd ),
        /* E2 */ I( ILLEGAL, Illegal ),
        /* E3 */ I( ILLEGAL, Illegal ),
        /* E4 */ I( CPX, Zpg ),
        /* E5 */ I( SBC, Zpg ),
        /* E6 */ I( INC, Zpg ),
        /* E7 */ I( ILLEGAL, Illegal ),
        /* E8 */ I( INX, Impl ),
        /* E9 */ I( SBC, Imm ),
        /* EA */ I( NOP, Impl ),
        /* EB */ I( ILLEGAL, Illegal ),
        /* EC */ I( CPX, Abs ),
        /* ED */ I( SBC, Abs ),
        /* EE */ I( INC, Abs ),
        /* EF */ I( ILLEGAL, Illegal ),
        /* F0 */ I( BEQ, Rel ),
        /* F1 */ I( SBC, IndY ),
        /* F2 */ I( ILLEGAL, Illegal ),
        /* F3 */ I( ILLEGAL, Illegal ),
        /* F4 */ I( ILLEGAL, Illegal ),
        /* F5 */ I( SBC, ZpgX ),
        /* F6 */ I( INC, ZpgX ),
        /* F7 */ I( ILLEGAL, Illegal ),
        /* F8 */ I( SED, Impl ),
        /* F9 */ I( SBC, AbsY ),
        /* FA */ I( ILLEGAL, Illegal ),
        /* FB */ I( ILLEGAL, Illegal ),
        /* FC */ I( ILLEGAL, Illegal ),
        /* FD */ I( SBC, AbsX ),
        /* FE */ I( INC, AbsX ),
        /* FF */ I( ILLEGAL, Illegal ),

        ]

};

pub fn instruction_lookup(opcode: u8) -> Instruction {
    let I(mnemonic, addr_mode) = INSTRUCTIONS_DEF[opcode as usize];
    Instruction { mnemonic: mnemonic, addr_mode: addr_mode }
}

use crate::shared::addr_mode_flag as amf;

pub fn lookup_addr_mode_flags(mode: AddrMode) -> amf::T {
    use crate::shared::addr_mode_flag::*;
    match mode {

        AddrMode::Illegal => { panic!("Illegal address mode."); }

        AddrMode::Impl => combine(NoFlag, NoFlag, NoFlag),
        AddrMode::Imm  => combine(NoFlag, NoFlag, NoFlag),

        AddrMode::Zpg  => combine(Resolve,  Zpg,    NoIndex),
        AddrMode::ZpgX => combine(Resolve,  Zpg,    X      ),
        AddrMode::ZpgY => combine(Resolve,  Zpg,    Y      ),

        AddrMode::Rel  => combine(Resolve,  NoFlag, NoIndex),

        AddrMode::Abs  => combine(Resolve,  Abs,    NoIndex),
        AddrMode::AbsX => combine(Resolve,  Abs,    X      ),
        AddrMode::AbsY => combine(Resolve,  Abs,    Y      ),

        AddrMode::Ind  => combine(Resolve,  Ind,    NoIndex),
        AddrMode::XInd => combine(Resolve,  Ind,    X      ),
        AddrMode::IndY => combine(Resolve,  Ind,    Y      ),

    }
}

