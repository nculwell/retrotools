
use crate::shared::{AddrMode, AddrModeFlag, Opcode};
use crate::shared::AddrMode::*;
use crate::shared::Opcode::*;
use crate::shared::{AddrModeFlag as AMF};

pub struct Instruction {
    pub opcode: Opcode,
    pub addr_mode: AddrMode,
}

struct I(Opcode, AddrMode);

const INSTRUCTIONS_DEF: [I; 0x100] = [

    /* 00 */ I( BRK, Impl ),
    /* 01 */ I( ORA, XInd ),
    /* 02 */ I( XXX, AddrMode::Xxx ),
    /* 03 */ I( XXX, AddrMode::Xxx ),
    /* 04 */ I( XXX, AddrMode::Xxx ),
    /* 05 */ I( ORA, Zpg ),
    /* 06 */ I( ASL, Zpg ),
    /* 07 */ I( XXX, AddrMode::Xxx ),
    /* 08 */ I( PHP, Impl ),
    /* 09 */ I( ORA, Imm ),
    /* 0A */ I( ASL, Impl /* A */ ),
    /* 0B */ I( XXX, AddrMode::Xxx ),
    /* 0C */ I( XXX, AddrMode::Xxx ),
    /* 0D */ I( ORA, Abs ),
    /* 0E */ I( ASL, Abs ),
    /* 0F */ I( XXX, AddrMode::Xxx ),
    /* 10 */ I( BPL, Rel ),
    /* 11 */ I( ORA, IndY ),
    /* 12 */ I( XXX, AddrMode::Xxx ),
    /* 13 */ I( XXX, AddrMode::Xxx ),
    /* 14 */ I( XXX, AddrMode::Xxx ),
    /* 15 */ I( ORA, Zpg ),
    /* 16 */ I( ASL, ZpgX ),
    /* 17 */ I( XXX, AddrMode::Xxx ),
    /* 18 */ I( CLC, Impl ),
    /* 19 */ I( ORA, AbsY ),
    /* 1A */ I( XXX, AddrMode::Xxx ),
    /* 1B */ I( XXX, AddrMode::Xxx ),
    /* 1C */ I( XXX, AddrMode::Xxx ),
    /* 1D */ I( ORA, AbsX ),
    /* 1E */ I( ASL, AbsX ),
    /* 1F */ I( XXX, AddrMode::Xxx ),
    /* 20 */ I( JSR, Abs ),
    /* 21 */ I( AND, XInd ),
    /* 22 */ I( XXX, AddrMode::Xxx ),
    /* 23 */ I( XXX, AddrMode::Xxx ),
    /* 24 */ I( BIT, Zpg ),
    /* 25 */ I( AND, Zpg ),
    /* 26 */ I( ROL, Zpg ),
    /* 27 */ I( XXX, AddrMode::Xxx ),
    /* 28 */ I( PLP, Impl ),
    /* 29 */ I( AND, Imm ),
    /* 2A */ I( ROL, Impl /* A */ ),
    /* 2B */ I( XXX, AddrMode::Xxx ),
    /* 2C */ I( BIT, Abs ),
    /* 2D */ I( AND, Abs ),
    /* 2E */ I( ROL, Abs ),
    /* 2F */ I( XXX, AddrMode::Xxx ),
    /* 30 */ I( BMI, Rel ),
    /* 31 */ I( AND, IndY ),
    /* 32 */ I( XXX, AddrMode::Xxx ),
    /* 33 */ I( XXX, AddrMode::Xxx ),
    /* 34 */ I( XXX, AddrMode::Xxx ),
    /* 35 */ I( AND, Zpg ),
    /* 36 */ I( ROL, ZpgX ),
    /* 37 */ I( XXX, AddrMode::Xxx ),
    /* 38 */ I( SEC, Impl ),
    /* 39 */ I( AND, AbsY ),
    /* 3A */ I( XXX, AddrMode::Xxx ),
    /* 3B */ I( XXX, AddrMode::Xxx ),
    /* 3C */ I( XXX, AddrMode::Xxx ),
    /* 3D */ I( AND, AbsX ),
    /* 3E */ I( ROL, AbsX ),
    /* 3F */ I( XXX, AddrMode::Xxx ),
    /* 40 */ I( RTI, Impl ),
    /* 41 */ I( EOR, XInd ),
    /* 42 */ I( XXX, AddrMode::Xxx ),
    /* 43 */ I( XXX, AddrMode::Xxx ),
    /* 44 */ I( XXX, AddrMode::Xxx ),
    /* 45 */ I( EOR, Zpg ),
    /* 46 */ I( LSR, Zpg ),
    /* 47 */ I( XXX, AddrMode::Xxx ),
    /* 48 */ I( PHA, Impl ),
    /* 49 */ I( EOR, Imm ),
    /* 4A */ I( LSR, Impl /* A */ ),
    /* 4B */ I( XXX, AddrMode::Xxx ),
    /* 4C */ I( JMP, Abs ),
    /* 4D */ I( EOR, Abs ),
    /* 4E */ I( LSR, Abs ),
    /* 4F */ I( XXX, AddrMode::Xxx ),
    /* 50 */ I( BVC, Rel ),
    /* 51 */ I( EOR, IndY ),
    /* 52 */ I( XXX, AddrMode::Xxx ),
    /* 53 */ I( XXX, AddrMode::Xxx ),
    /* 54 */ I( XXX, AddrMode::Xxx ),
    /* 55 */ I( EOR, Zpg ),
    /* 56 */ I( LSR, Zpg ),
    /* 57 */ I( XXX, AddrMode::Xxx ),
    /* 58 */ I( CLI, Impl ),
    /* 59 */ I( EOR, AbsY ),
    /* 5A */ I( XXX, AddrMode::Xxx ),
    /* 5B */ I( XXX, AddrMode::Xxx ),
    /* 5C */ I( XXX, AddrMode::Xxx ),
    /* 5D */ I( EOR, AbsX ),
    /* 5E */ I( LSR, AbsX ),
    /* 5F */ I( XXX, AddrMode::Xxx ),
    /* 60 */ I( RTS, Impl ),
    /* 61 */ I( ADC, XInd ),
    /* 62 */ I( XXX, AddrMode::Xxx ),
    /* 63 */ I( XXX, AddrMode::Xxx ),
    /* 64 */ I( XXX, AddrMode::Xxx ),
    /* 65 */ I( ADC, Zpg ),
    /* 66 */ I( ROR, Zpg ),
    /* 67 */ I( XXX, AddrMode::Xxx ),
    /* 68 */ I( PLA, Impl ),
    /* 69 */ I( ADC, Imm ),
    /* 6A */ I( ROR, Impl /* A */ ),
    /* 6B */ I( XXX, AddrMode::Xxx ),
    /* 6C */ I( JMP, Ind ),
    /* 6D */ I( ADC, Abs ),
    /* 6E */ I( ROR, Abs ),
    /* 6F */ I( XXX, AddrMode::Xxx ),
    /* 70 */ I( BVS, Rel ),
    /* 71 */ I( SBC, IndY ),
    /* 72 */ I( XXX, AddrMode::Xxx ),
    /* 73 */ I( XXX, AddrMode::Xxx ),
    /* 74 */ I( XXX, AddrMode::Xxx ),
    /* 75 */ I( ADC, ZpgX ),
    /* 76 */ I( ROR, ZpgX ),
    /* 77 */ I( XXX, AddrMode::Xxx ),
    /* 78 */ I( SEI, Impl ),
    /* 79 */ I( ADC, AbsY ),
    /* 7A */ I( XXX, AddrMode::Xxx ),
    /* 7B */ I( XXX, AddrMode::Xxx ),
    /* 7C */ I( XXX, AddrMode::Xxx ),
    /* 7D */ I( ADC, AbsY ),
    /* 7E */ I( ROR, AbsX ),
    /* 7F */ I( XXX, AddrMode::Xxx ),
    /* 80 */ I( XXX, AddrMode::Xxx ),
    /* 81 */ I( STA, XInd ),
    /* 82 */ I( XXX, AddrMode::Xxx ),
    /* 83 */ I( XXX, AddrMode::Xxx ),
    /* 84 */ I( STY, Zpg ),
    /* 85 */ I( STA, Zpg ),
    /* 86 */ I( STX, Zpg ),
    /* 87 */ I( XXX, AddrMode::Xxx ),
    /* 88 */ I( DEY, Impl ),
    /* 89 */ I( XXX, AddrMode::Xxx ),
    /* 8A */ I( TXA, Impl ),
    /* 8B */ I( XXX, AddrMode::Xxx ),
    /* 8C */ I( STY, Abs ),
    /* 8D */ I( STA, Abs ),
    /* 8E */ I( STX, Abs ),
    /* 8F */ I( XXX, AddrMode::Xxx ),
    /* 90 */ I( BCC, Rel ),
    /* 91 */ I( STA, IndY ),
    /* 92 */ I( XXX, AddrMode::Xxx ),
    /* 93 */ I( XXX, AddrMode::Xxx ),
    /* 94 */ I( STY, ZpgX ),
    /* 95 */ I( STA, ZpgX ),
    /* 96 */ I( STX, ZpgY ),
    /* 97 */ I( XXX, AddrMode::Xxx ),
    /* 98 */ I( TYA, Impl ),
    /* 99 */ I( STA, AbsY ),
    /* 9A */ I( TXS, Impl ),
    /* 9B */ I( XXX, AddrMode::Xxx ),
    /* 9C */ I( XXX, AddrMode::Xxx ),
    /* 9D */ I( STA, AbsX ),
    /* 9E */ I( XXX, AddrMode::Xxx ),
    /* 9F */ I( XXX, AddrMode::Xxx ),
    /* A0 */ I( LDY, Imm ),
    /* A1 */ I( LDA, XInd ),
    /* A2 */ I( LDX, Imm ),
    /* A3 */ I( XXX, AddrMode::Xxx ),
    /* A4 */ I( LDY, Zpg ),
    /* A5 */ I( LDA, Zpg ),
    /* A6 */ I( LDX, Zpg ),
    /* A7 */ I( XXX, AddrMode::Xxx ),
    /* A8 */ I( TAY, Impl ),
    /* A9 */ I( LDA, Imm ),
    /* AA */ I( TAX, Impl ),
    /* AB */ I( XXX, AddrMode::Xxx ),
    /* AC */ I( LDY, Abs ),
    /* AD */ I( LDA, Abs ),
    /* AE */ I( LDX, Abs ),
    /* AF */ I( XXX, AddrMode::Xxx ),
    /* B0 */ I( BCS, Rel ),
    /* B1 */ I( LDA, IndY ),
    /* B2 */ I( XXX, AddrMode::Xxx ),
    /* B3 */ I( XXX, AddrMode::Xxx ),
    /* B4 */ I( LDY, ZpgX ),
    /* B5 */ I( LDA, ZpgX ),
    /* B6 */ I( LDX, ZpgY ),
    /* B7 */ I( XXX, AddrMode::Xxx ),
    /* B8 */ I( CLV, Impl ),
    /* B9 */ I( LDA, AbsY ),
    /* BA */ I( TSX, Impl ),
    /* BB */ I( XXX, AddrMode::Xxx ),
    /* BC */ I( LDY, AbsX ),
    /* BD */ I( LDA, AbsX ),
    /* BE */ I( LDX, AbsY ),
    /* BF */ I( XXX, AddrMode::Xxx ),
    /* C0 */ I( CPY, Imm ),
    /* C1 */ I( CMP, XInd ),
    /* C2 */ I( XXX, AddrMode::Xxx ),
    /* C3 */ I( XXX, AddrMode::Xxx ),
    /* C4 */ I( CPY, Zpg ),
    /* C5 */ I( CMP, Zpg ),
    /* C6 */ I( DEC, Zpg ),
    /* C7 */ I( XXX, AddrMode::Xxx ),
    /* C8 */ I( INY, Impl ),
    /* C9 */ I( CMP, Imm ),
    /* CA */ I( DEX, Impl ),
    /* CB */ I( XXX, AddrMode::Xxx ),
    /* CC */ I( CPY, Abs ),
    /* CD */ I( CMP, Abs ),
    /* CE */ I( DEC, Abs ),
    /* CF */ I( XXX, AddrMode::Xxx ),
    /* D0 */ I( BNE, Rel ),
    /* D1 */ I( CMP, IndY ),
    /* D2 */ I( XXX, AddrMode::Xxx ),
    /* D3 */ I( XXX, AddrMode::Xxx ),
    /* D4 */ I( XXX, AddrMode::Xxx ),
    /* D5 */ I( CMP, ZpgX ),
    /* D6 */ I( DEC, ZpgX ),
    /* D7 */ I( XXX, AddrMode::Xxx ),
    /* D8 */ I( CLD, Impl ),
    /* D9 */ I( CMP, AbsY ),
    /* DA */ I( XXX, AddrMode::Xxx ),
    /* DB */ I( XXX, AddrMode::Xxx ),
    /* DC */ I( XXX, AddrMode::Xxx ),
    /* DD */ I( CMP, AbsX ),
    /* DE */ I( DEC, AbsX ),
    /* DF */ I( XXX, AddrMode::Xxx ),
    /* E0 */ I( CPX, Imm ),
    /* E1 */ I( SBC, XInd ),
    /* E2 */ I( XXX, AddrMode::Xxx ),
    /* E3 */ I( XXX, AddrMode::Xxx ),
    /* E4 */ I( CPX, Zpg ),
    /* E5 */ I( SBC, Zpg ),
    /* E6 */ I( INC, Zpg ),
    /* E7 */ I( XXX, AddrMode::Xxx ),
    /* E8 */ I( INX, Impl ),
    /* E9 */ I( SBC, Imm ),
    /* EA */ I( NOP, Impl ),
    /* EB */ I( XXX, AddrMode::Xxx ),
    /* EC */ I( CPX, Abs ),
    /* ED */ I( SBC, Abs ),
    /* EE */ I( INC, Abs ),
    /* EF */ I( XXX, AddrMode::Xxx ),
    /* F0 */ I( BEQ, Rel ),
    /* F1 */ I( SBC, IndY ),
    /* F2 */ I( XXX, AddrMode::Xxx ),
    /* F3 */ I( XXX, AddrMode::Xxx ),
    /* F4 */ I( XXX, AddrMode::Xxx ),
    /* F5 */ I( SBC, ZpgX ),
    /* F6 */ I( INC, ZpgX ),
    /* F7 */ I( XXX, AddrMode::Xxx ),
    /* F8 */ I( SED, Impl ),
    /* F9 */ I( SBC, AbsY ),
    /* FA */ I( XXX, AddrMode::Xxx ),
    /* FB */ I( XXX, AddrMode::Xxx ),
    /* FC */ I( XXX, AddrMode::Xxx ),
    /* FD */ I( SBC, AbsX ),
    /* FE */ I( INC, AbsX ),
    /* FF */ I( XXX, AddrMode::Xxx ),

];

pub fn instruction_lookup(opcode_byte: u8) -> Instruction {
    let I(opcode, addr_mode) = INSTRUCTIONS_DEF[opcode_byte as usize];
    Instruction { opcode: opcode, addr_mode: addr_mode }
}

pub fn lookup_addr_mode_flags(mode: AddrMode) -> AddrModeFlag::T {
    match mode {

        Xxx  => { panic!("Invalid address mode."); }

        Impl => AMF::combine(AMF::None, AMF::None, AMF::None),
        Imm  => AMF::combine(AMF::None, AMF::None, AMF::None),

        Zpg  => AMF::combine(AMF::Resolve,  AMF::Zpg,  AMF::NoIndex),
        ZpgX => AMF::combine(AMF::Resolve,  AMF::Zpg,  AMF::X      ),
        ZpgY => AMF::combine(AMF::Resolve,  AMF::Zpg,  AMF::Y      ),

        Rel  => AMF::combine(AMF::Resolve,  AMF::None, AMF::NoIndex),

        Abs  => AMF::combine(AMF::Resolve,  AMF::Abs,  AMF::NoIndex),
        AbsX => AMF::combine(AMF::Resolve,  AMF::Abs,  AMF::X      ),
        AbsY => AMF::combine(AMF::Resolve,  AMF::Abs,  AMF::Y      ),

        Ind  => AMF::combine(AMF::Resolve,  AMF::Ind,  AMF::NoIndex),
        XInd => AMF::combine(AMF::Resolve,  AMF::Ind,  AMF::X      ),
        IndY => AMF::combine(AMF::Resolve,  AMF::Ind,  AMF::Y      ),

    }
}

